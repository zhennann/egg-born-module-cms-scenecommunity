{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/en-us.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/post.js","webpack://backend/./backend/src/controller/event.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/post.js","webpack://backend/external \"require3\"","webpack://backend/./backend/src/service/event.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/post.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,eAAe,mBAAO,CAAC,CAAoB;AAC3C,gBAAgB,mBAAO,CAAC,CAAqB;AAC7C,eAAe,mBAAO,CAAC,CAAoB;AAC3C,oBAAoB,mBAAO,CAAC,CAAyB;;AAErD;;AAEA;AACA,iBAAiB,mBAAO,CAAC,CAAa;AACtC;AACA,mBAAmB,mBAAO,CAAC,EAAe;AAC1C;AACA,iBAAiB,mBAAO,CAAC,EAAa;AACtC;AACA,eAAe,mBAAO,CAAC,EAAW;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA,KAAK;AACL;;AAEA;AACA;;;;;;;ACpDA;AACA,WAAW,mBAAO,CAAC,CAAmB;AACtC,WAAW,mBAAO,CAAC,CAAmB;AACtC;;;;;;;A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CA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;AClHA,qC;;;;;;ACAA;AACA;AACA;;AAEA,8BAA8B,eAAe,kBAAkB,EAAE;AACjE;AACA;AACA,4DAA4D,sCAAsC;AAClG,iEAAiE,4CAA4C;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;ACxBA,aAAa,mBAAO,CAAC,EAAiB;;AAEtC;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,iCAAiC,wBAAwB,EAAE;AAC7E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iBAAiB,iBAAiB,wBAAwB;AAC7F,kBAAkB,mBAAO,CAAC,EAAgC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA,aAAa,8CAA8C;AAC3D;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,eAAe;AAChE,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,0CAA0C,eAAe;AACzD,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n\n  // site\n  config.site = {\n    base: {\n      title: 'Community',\n      subTitle: 'Everything About CabloyJS',\n      description: '',\n      keywords: '',\n      publishOnSubmit: true,\n    },\n    host: {\n      url: 'http://community.example.com',\n      rootPath: '',\n    },\n    language: {\n      default: 'en-us',\n      items: 'en-us',\n    },\n    themes: {\n      'en-us': 'cms-themecommunity',\n    },\n    edit: {\n      mode: 1, // markdown\n    },\n    env: {\n      format: {\n        date: 'YYYY-MM-DD',\n        time: 'HH:mm:ss',\n      },\n      article2: {\n        recentNum: 5,\n      },\n      comment: {\n        order: 'asc',\n        recentNum: 5,\n      },\n      brother: {\n        order: 'desc',\n      },\n      loadMore: {\n        loadOnScroll: false,\n      },\n    },\n    profile: {\n\n    },\n  };\n\n  return config;\n};\n","module.exports = {\n  'en-us': require('./locale/en-us.js'),\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  Post2: 'Post',\n};\n","module.exports = {\n  'CMS:Community': 'CMS:社区',\n  Post2: '帖子',\n  'Create Post': '新建帖子',\n  'Post List': '帖子列表',\n  'Post List(by category)': '帖子列表(按目录)',\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst post = require('./controller/post.js');\nconst event = require('./controller/event.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // post\n    { method: 'post', path: 'post/create', controller: post, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'post/read', controller: post, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'post/select', controller: post, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'post/write', controller: post, middlewares: 'inner', meta: { auth: { enable: false } },\n    },\n    { method: 'post', path: 'post/delete', controller: post, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'post/action', controller: post, middlewares: 'inner', meta: { auth: { enable: false } } },\n    { method: 'post', path: 'post/enable', controller: post, middlewares: 'inner', meta: { auth: { enable: false } } },\n    // event\n    { method: 'post', path: 'event/atomClassValidator', controller: event, middlewares: 'inner', meta: { auth: { enable: false } } },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n\n  class PostController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.post.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.post.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.post.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.post.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.post.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.post.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.post.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n  return PostController;\n};\n\n","module.exports = app => {\n\n  class EventController extends app.Controller {\n\n    async atomClassValidator() {\n      const res = await this.ctx.service.event.atomClassValidator({\n        event: this.ctx.request.body.event,\n        data: this.ctx.request.body.data,\n      });\n      this.ctx.success(res);\n    }\n\n  }\n\n  return EventController;\n};\n","const version = require('./service/version.js');\nconst post = require('./service/post.js');\nconst event = require('./service/event.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    post,\n    event,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // create roles: cms-community-writer to template\n        const roles = [ 'cms-community-writer', 'cms-community-publisher' ];\n        const roleTemplate = await this.ctx.meta.role.getSystemRole({ roleName: 'template' });\n        const roleSuperuser = await this.ctx.meta.role.getSystemRole({ roleName: 'superuser' });\n        const roleActivated = await this.ctx.meta.role.getSystemRole({ roleName: 'activated' });\n        for (const roleName of roles) {\n          const roleId = await this.ctx.meta.role.add({\n            roleName,\n            roleIdParent: roleTemplate.id,\n          });\n          // role:superuser include cms-community\n          await this.ctx.meta.role.addRoleInc({ roleId: roleSuperuser.id, roleIdInc: roleId });\n          // role:activated include cms-community-writer\n          if (roleName === 'cms-community-writer') {\n            await this.ctx.meta.role.addRoleInc({ roleId: roleActivated.id, roleIdInc: roleId });\n          }\n        }\n        // build roles\n        await this.ctx.meta.role.setDirty(true);\n\n        // add role rights\n        const roleRights = [\n          { roleName: 'cms-community-writer', action: 'create' },\n          { roleName: 'cms-community-writer', action: 'write', scopeNames: 0 },\n          { roleName: 'cms-community-writer', action: 'delete', scopeNames: 0 },\n          { roleName: 'cms-community-writer', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'cms-community-publisher', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'cms-community-publisher', action: 'write', scopeNames: 'authenticated' },\n          { roleName: 'cms-community-publisher', action: 'publish', scopeNames: 'authenticated' },\n          { roleName: 'root', action: 'read', scopeNames: 'authenticated' },\n        ];\n        await this.ctx.meta.role.addRoleRightBatch({ atomClassName: 'post', roleRights });\n\n      }\n    }\n\n    async test() {\n    }\n\n  }\n\n  return Version;\n};\n","const require3 = require('require3');\nconst mparse = require3('egg-born-mparse').default;\n\nmodule.exports = app => {\n  // this module\n  // const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  // article module\n  const articleModuleInfo = mparse.parseInfo('a-cms');\n  const articleAtomClassName = 'article';\n\n  class Post extends app.Service {\n\n    async create({ atomClass, key, item, user }) {\n      // route to article\n      const itemKey = await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/create`,\n        body: {\n          atomClass,\n          key,\n          item,\n          user,\n        },\n      });\n      // return key\n      return itemKey;\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // route to article\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/read`,\n        body: {\n          atomClass,\n          key,\n          item,\n          user,\n        },\n      });\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // route to article\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/select`,\n        body: {\n          atomClass,\n          options,\n          items,\n          user,\n        },\n      });\n    }\n\n    async write({ atomClass, key, item, user }) {\n      // route to article\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/write`,\n        body: {\n          atomClass,\n          key,\n          item,\n          user,\n        },\n      });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // route to article\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/delete`,\n        body: {\n          atomClass,\n          key,\n          user,\n        },\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      // route to article\n      return await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/action`,\n        body: {\n          action,\n          atomClass,\n          key,\n          user,\n        },\n      });\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // route to article\n      await this.ctx.performAction({\n        method: 'post',\n        url: `/${articleModuleInfo.url}/${articleAtomClassName}/enable`,\n        body: {\n          atomClass,\n          key,\n          atom,\n          user,\n        },\n      });\n    }\n\n  }\n\n  return Post;\n};\n","module.exports = require(\"require3\");","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  class Event extends app.Service {\n\n    async atomClassValidator({ event, data: { atomClass, user } }) {\n      if (atomClass.module === moduleInfo.relativeName && atomClass.atomClassName === 'post') {\n        // check if in role:cms-community-publisher\n        const rolePublisher = await this.ctx.meta.role.get({ roleName: 'cms-community-publisher' });\n        const check = await this.ctx.meta.role.userInRoleExpand({ userId: user.id, roleId: rolePublisher.id });\n        if (!check) return null;\n        // break event\n        event.break = true;\n        // more fields\n        const validator = {\n          module: 'a-cms',\n          validator: 'article',\n        };\n        return validator;\n      }\n    }\n\n  }\n\n  return Event;\n};\n","const post = require('./model/post.js');\n\nmodule.exports = app => {\n  const models = {\n    post,\n  };\n  return models;\n};\n","module.exports = app => {\n  class Post extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'aCmsArticle', options: { disableDeleted: false } });\n    }\n  }\n  return Post;\n};\n","module.exports = app => {\n  const moduleInfo = app.meta.mockUtil.parseInfoFromPackage(__dirname);\n  const atomClass = {\n    module: moduleInfo.relativeName,\n    atomClassName: 'post',\n  };\n  const atomClassQuery = `module=${atomClass.module}&atomClassName=${atomClass.atomClassName}`;\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        post: {\n          info: {\n            title: 'Post2',\n            tableName: 'aCmsArticleView',\n            tableNameFull: 'aCmsArticleViewFull',\n            tableNameSearch: 'aCmsArticleViewSearch',\n            tableNameTag: 'aCmsArticleViewTag',\n            flow: 1,\n          },\n          actions: {\n            publish: {\n              code: 101,\n              title: 'Publish',\n              flag: '1,2',\n            },\n          },\n          flags: {\n            1: {\n              title: 'Publishing',\n            },\n            2: {\n              title: 'Published',\n            },\n          },\n          validator: 'post',\n          search: {\n            validator: 'postSearch',\n          },\n          orders: [\n            { name: 'sticky', title: 'Sticky', by: 'desc' },\n          ],\n        },\n      },\n      functions: {\n        createPost: {\n          title: 'Create Post',\n          scene: 'create',\n          autoRight: 1,\n          atomClassName: 'post',\n          action: 'create',\n          sorting: 2,\n          menu: 1,\n        },\n        listPost: {\n          title: 'Post List',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'post',\n          action: 'read',\n          sorting: 2,\n          menu: 1,\n        },\n        listPostByCategory: {\n          title: 'Post List(by category)',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'post',\n          action: 'read',\n          sorting: 2,\n          menu: 1,\n          actionPath: `/a/cms/article/category?${atomClassQuery}`,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        post: {\n          schemas: 'post',\n        },\n        postSearch: {\n          schemas: 'postSearch',\n        },\n      },\n      keywords: {},\n      schemas: {\n        post: schemas.post,\n        postSearch: schemas.postSearch,\n      },\n    },\n    settings: {\n      instance: {\n        actionPath: `/a/cms/config/list?${atomClassQuery}`,\n      },\n    },\n    event: {\n      implementations: {\n        'a-base:atomClassValidator': 'event/atomClassValidator',\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // post\n  schemas.post = {\n    type: 'object',\n    meta: {\n      custom: {\n        component: 'postItem',\n      },\n    },\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Atom Name',\n        notEmpty: true,\n      },\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebMultiple: false,\n        ebOptionsBlankAuto: true,\n        notEmpty: true,\n      },\n      categoryId: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Category',\n        notEmpty: true,\n      },\n      tags: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Tags',\n      },\n      content: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n      },\n    },\n  };\n  // post search\n  schemas.postSearch = {\n    type: 'object',\n    meta: {\n      custom: {\n        component: 'postSearch',\n      },\n    },\n    properties: {\n      language: {\n        type: 'string',\n        ebType: 'select',\n        ebTitle: 'Language',\n        ebMultiple: false,\n        ebOptionsBlankAuto: true,\n      },\n      categoryId: {\n        type: 'number',\n        ebType: 'text',\n        ebTitle: 'Category',\n      },\n      content: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'Content',\n      },\n    },\n  };\n  return schemas;\n};\n"],"sourceRoot":""}